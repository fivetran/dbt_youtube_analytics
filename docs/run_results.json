{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v5.json", "dbt_version": "1.7.3", "generated_at": "2023-12-04T20:26:03.915718Z", "invocation_id": "7f7b1406-e994-45de-8528-a1c2593fbae6", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-04T20:26:02.812335Z", "completed_at": "2023-12-04T20:26:02.813349Z"}, {"name": "execute", "started_at": "2023-12-04T20:26:02.815449Z", "completed_at": "2023-12-04T20:26:02.815461Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.015216827392578125, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.youtube_analytics_integration_tests.youtube_channel_basic_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-04T20:26:02.802328Z", "completed_at": "2023-12-04T20:26:02.813831Z"}, {"name": "execute", "started_at": "2023-12-04T20:26:02.816141Z", "completed_at": "2023-12-04T20:26:02.816146Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.018277883529663086, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.youtube_analytics_source.stg_youtube__channel_basic_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"youtube_analytics_integration_tests_2\".\"youtube_channel_basic_data\"", "relation_name": "\"postgres\".\"youtube_analytics_integration_tests_2_youtube_source\".\"stg_youtube__channel_basic_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-04T20:26:02.807732Z", "completed_at": "2023-12-04T20:26:02.814653Z"}, {"name": "execute", "started_at": "2023-12-04T20:26:02.817270Z", "completed_at": "2023-12-04T20:26:02.817273Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.017972946166992188, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.youtube_analytics_source.stg_youtube__channel_demographics_tmp", "compiled": true, "compiled_code": "\n\nselect *\nfrom \"postgres\".\"youtube_analytics_integration_tests_2\".\"youtube_channel_demographics_data\"", "relation_name": "\"postgres\".\"youtube_analytics_integration_tests_2_youtube_source\".\"stg_youtube__channel_demographics_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-04T20:26:02.810056Z", "completed_at": "2023-12-04T20:26:02.815198Z"}, {"name": "execute", "started_at": "2023-12-04T20:26:02.817989Z", "completed_at": "2023-12-04T20:26:02.817992Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.018143892288208008, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.youtube_analytics_source.stg_youtube__video_tmp", "compiled": true, "compiled_code": "select * \nfrom \"postgres\".\"youtube_analytics_integration_tests_2\".\"youtube_video_data\"", "relation_name": "\"postgres\".\"youtube_analytics_integration_tests_2_youtube_source\".\"stg_youtube__video_tmp\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-04T20:26:02.822634Z", "completed_at": "2023-12-04T20:26:02.824326Z"}, {"name": "execute", "started_at": "2023-12-04T20:26:02.835949Z", "completed_at": "2023-12-04T20:26:02.835956Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.017252206802368164, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.youtube_analytics_integration_tests.youtube_channel_demographics_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-04T20:26:02.824900Z", "completed_at": "2023-12-04T20:26:02.825821Z"}, {"name": "execute", "started_at": "2023-12-04T20:26:02.836464Z", "completed_at": "2023-12-04T20:26:02.836467Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.017117023468017578, "adapter_response": {}, "message": null, "failures": null, "unique_id": "seed.youtube_analytics_integration_tests.youtube_video_data", "compiled": null, "compiled_code": null, "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-04T20:26:02.839425Z", "completed_at": "2023-12-04T20:26:03.228469Z"}, {"name": "execute", "started_at": "2023-12-04T20:26:03.229495Z", "completed_at": "2023-12-04T20:26:03.229499Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.4227302074432373, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.youtube_analytics_source.stg_youtube__video", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"youtube_analytics_integration_tests_2_youtube_source\".\"stg_youtube__video_tmp\"\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    content_details_caption\n    \n as \n    \n    content_details_caption\n    \n, \n    \n    \n    content_details_definition\n    \n as \n    \n    content_details_definition\n    \n, \n    \n    \n    content_details_dimension\n    \n as \n    \n    content_details_dimension\n    \n, \n    \n    \n    content_details_duration\n    \n as \n    \n    content_details_duration\n    \n, \n    \n    \n    content_details_has_custom_thumbnail\n    \n as \n    \n    content_details_has_custom_thumbnail\n    \n, \n    \n    \n    content_details_licensed_content\n    \n as \n    \n    content_details_licensed_content\n    \n, \n    \n    \n    content_details_projection\n    \n as \n    \n    content_details_projection\n    \n, \n    \n    \n    content_details_region_restriction\n    \n as \n    \n    content_details_region_restriction\n    \n, \n    \n    \n    etag\n    \n as \n    \n    etag\n    \n, \n    \n    \n    id\n    \n as \n    \n    id\n    \n, \n    \n    \n    kind\n    \n as \n    \n    kind\n    \n, \n    \n    \n    player_embed_height\n    \n as \n    \n    player_embed_height\n    \n, \n    \n    \n    player_embed_html\n    \n as \n    \n    player_embed_html\n    \n, \n    \n    \n    player_embed_width\n    \n as \n    \n    player_embed_width\n    \n, \n    \n    \n    privacy_status\n    \n as \n    \n    privacy_status\n    \n, \n    \n    \n    snippet_category_id\n    \n as \n    \n    snippet_category_id\n    \n, \n    \n    \n    snippet_channel_id\n    \n as \n    \n    snippet_channel_id\n    \n, \n    \n    \n    snippet_channel_title\n    \n as \n    \n    snippet_channel_title\n    \n, \n    \n    \n    snippet_default_audio_language\n    \n as \n    \n    snippet_default_audio_language\n    \n, \n    \n    \n    snippet_default_language\n    \n as \n    \n    snippet_default_language\n    \n, \n    \n    \n    snippet_description\n    \n as \n    \n    snippet_description\n    \n, \n    \n    \n    snippet_live_broadcast_content\n    \n as \n    \n    snippet_live_broadcast_content\n    \n, \n    \n    \n    snippet_localized\n    \n as \n    \n    snippet_localized\n    \n, \n    \n    \n    snippet_published_at\n    \n as \n    \n    snippet_published_at\n    \n, \n    \n    \n    snippet_tags\n    \n as \n    \n    snippet_tags\n    \n, \n    \n    \n    snippet_thumbnails\n    \n as \n    \n    snippet_thumbnails\n    \n, \n    \n    \n    snippet_title\n    \n as \n    \n    snippet_title\n    \n, \n    \n    \n    statistics_comment_count\n    \n as \n    \n    statistics_comment_count\n    \n, \n    \n    \n    statistics_dislike_count\n    \n as \n    \n    statistics_dislike_count\n    \n, \n    \n    \n    statistics_favorite_count\n    \n as \n    \n    statistics_favorite_count\n    \n, \n    \n    \n    statistics_like_count\n    \n as \n    \n    statistics_like_count\n    \n, \n    \n    \n    statistics_view_count\n    \n as \n    \n    statistics_view_count\n    \n, \n    \n    \n    status_embeddable\n    \n as \n    \n    status_embeddable\n    \n, \n    \n    \n    status_failure_reason\n    \n as \n    \n    status_failure_reason\n    \n, \n    \n    \n    status_license\n    \n as \n    \n    status_license\n    \n, \n    \n    \n    status_made_for_kids\n    \n as \n    \n    status_made_for_kids\n    \n, \n    \n    \n    status_public_stats_viewable\n    \n as \n    \n    status_public_stats_viewable\n    \n, \n    \n    \n    status_publish_at\n    \n as \n    \n    status_publish_at\n    \n, \n    \n    \n    status_rejection_reason\n    \n as \n    \n    status_rejection_reason\n    \n, \n    \n    \n    status_self_declared_made_for_kids\n    \n as \n    \n    status_self_declared_made_for_kids\n    \n, \n    \n    \n    upload_status\n    \n as \n    \n    upload_status\n    \n\n\n\n    from base\n),\n\nfinal as (\n    \n    select \n        id as video_id,\n        snippet_title as video_title,\n        snippet_description as video_description,\n        snippet_published_at as video_published_at,\n        snippet_channel_title as channel_title,\n        snippet_thumbnails as video_thumbnails,\n        snippet_category_id as video_category_id,\n        snippet_channel_id as channel_id,\n        snippet_default_audio_language as video_default_audio_language,\n        snippet_default_language as video_default_language,\n        snippet_live_broadcast_content as video_live_broadcast_content,\n        snippet_localized as video_localized,\n        snippet_tags as video_tags,\n        content_details_caption,\n        content_details_definition,\n        content_details_dimension,\n        content_details_duration,\n        content_details_has_custom_thumbnail,\n        content_details_licensed_content,\n        content_details_projection,\n        content_details_region_restriction,\n        etag,\n        kind,\n        player_embed_height,\n        player_embed_html,\n        player_embed_width,\n        privacy_status,\n        statistics_comment_count,\n        statistics_dislike_count,\n        statistics_favorite_count,\n        statistics_like_count,\n        statistics_view_count,\n        status_embeddable,\n        status_failure_reason,\n        status_license,\n        status_made_for_kids,\n        status_public_stats_viewable,\n        status_publish_at,\n        status_rejection_reason,\n        status_self_declared_made_for_kids,\n        upload_status,\n        _fivetran_synced\n    from fields\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"youtube_analytics_integration_tests_2_youtube_source\".\"stg_youtube__video\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-04T20:26:02.832414Z", "completed_at": "2023-12-04T20:26:03.228797Z"}, {"name": "execute", "started_at": "2023-12-04T20:26:03.229739Z", "completed_at": "2023-12-04T20:26:03.229742Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.4399900436401367, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.youtube_analytics_source.stg_youtube__channel_demographics", "compiled": true, "compiled_code": "\n\nwith base as (\n\n    select * \n    from \"postgres\".\"youtube_analytics_integration_tests_2_youtube_source\".\"stg_youtube__channel_demographics_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_id\n    \n as \n    \n    _fivetran_id\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    age_group\n    \n as \n    \n    age_group\n    \n, \n    \n    \n    channel_id\n    \n as \n    \n    channel_id\n    \n, \n    \n    \n    country_code\n    \n as \n    \n    country_code\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    gender\n    \n as \n    \n    gender\n    \n, \n    \n    \n    live_or_on_demand\n    \n as \n    \n    live_or_on_demand\n    \n, \n    \n    \n    subscribed_status\n    \n as \n    \n    subscribed_status\n    \n, \n    \n    \n    video_id\n    \n as \n    \n    video_id\n    \n, \n    \n    \n    views_percentage\n    \n as \n    \n    views_percentage\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_id,\n        date as date_day,\n        video_id,\n        channel_id,\n        age_group,\n        country_code,\n        gender,\n        live_or_on_demand,\n        subscribed_status,\n        views_percentage / 100.0 as views_percentage,\n        _fivetran_synced\n    from fields\n)\n\nselect * \nfrom final", "relation_name": "\"postgres\".\"youtube_analytics_integration_tests_2_youtube_source\".\"stg_youtube__channel_demographics\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-04T20:26:02.826607Z", "completed_at": "2023-12-04T20:26:03.227394Z"}, {"name": "execute", "started_at": "2023-12-04T20:26:03.227954Z", "completed_at": "2023-12-04T20:26:03.227963Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.44121384620666504, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.youtube_analytics_source.stg_youtube__channel_basic", "compiled": true, "compiled_code": "with base as (\n\n    select * \n    from \"postgres\".\"youtube_analytics_integration_tests_2_youtube_source\".\"stg_youtube__channel_basic_tmp\"\n\n),\n\nfields as (\n\n    select\n        \n    \n    \n    _fivetran_id\n    \n as \n    \n    _fivetran_id\n    \n, \n    \n    \n    _fivetran_synced\n    \n as \n    \n    _fivetran_synced\n    \n, \n    \n    \n    annotation_click_through_rate\n    \n as \n    \n    annotation_click_through_rate\n    \n, \n    \n    \n    annotation_clickable_impressions\n    \n as \n    \n    annotation_clickable_impressions\n    \n, \n    \n    \n    annotation_clicks\n    \n as \n    \n    annotation_clicks\n    \n, \n    \n    \n    annotation_closable_impressions\n    \n as \n    \n    annotation_closable_impressions\n    \n, \n    \n    \n    annotation_close_rate\n    \n as \n    \n    annotation_close_rate\n    \n, \n    \n    \n    annotation_closes\n    \n as \n    \n    annotation_closes\n    \n, \n    \n    \n    annotation_impressions\n    \n as \n    \n    annotation_impressions\n    \n, \n    \n    \n    average_view_duration_percentage\n    \n as \n    \n    average_view_duration_percentage\n    \n, \n    \n    \n    average_view_duration_seconds\n    \n as \n    \n    average_view_duration_seconds\n    \n, \n    \n    \n    card_click_rate\n    \n as \n    \n    card_click_rate\n    \n, \n    \n    \n    card_clicks\n    \n as \n    \n    card_clicks\n    \n, \n    \n    \n    card_impressions\n    \n as \n    \n    card_impressions\n    \n, \n    \n    \n    card_teaser_click_rate\n    \n as \n    \n    card_teaser_click_rate\n    \n, \n    \n    \n    card_teaser_clicks\n    \n as \n    \n    card_teaser_clicks\n    \n, \n    \n    \n    card_teaser_impressions\n    \n as \n    \n    card_teaser_impressions\n    \n, \n    \n    \n    channel_id\n    \n as \n    \n    channel_id\n    \n, \n    \n    \n    comments\n    \n as \n    \n    comments\n    \n, \n    \n    \n    country_code\n    \n as \n    \n    country_code\n    \n, \n    \n    \n    date\n    \n as \n    \n    date\n    \n, \n    \n    \n    dislikes\n    \n as \n    \n    dislikes\n    \n, \n    \n    \n    likes\n    \n as \n    \n    likes\n    \n, \n    \n    \n    live_or_on_demand\n    \n as \n    \n    live_or_on_demand\n    \n, \n    \n    \n    red_views\n    \n as \n    \n    red_views\n    \n, \n    \n    \n    red_watch_time_minutes\n    \n as \n    \n    red_watch_time_minutes\n    \n, \n    \n    \n    shares\n    \n as \n    \n    shares\n    \n, \n    \n    \n    subscribed_status\n    \n as \n    \n    subscribed_status\n    \n, \n    \n    \n    subscribers_gained\n    \n as \n    \n    subscribers_gained\n    \n, \n    \n    \n    subscribers_lost\n    \n as \n    \n    subscribers_lost\n    \n, \n    \n    \n    video_id\n    \n as \n    \n    video_id\n    \n, \n    \n    \n    videos_added_to_playlists\n    \n as \n    \n    videos_added_to_playlists\n    \n, \n    \n    \n    videos_removed_from_playlists\n    \n as \n    \n    videos_removed_from_playlists\n    \n, \n    \n    \n    views\n    \n as \n    \n    views\n    \n, \n    \n    \n    watch_time_minutes\n    \n as \n    \n    watch_time_minutes\n    \n\n\n\n        \n    from base\n),\n\nfinal as (\n    \n    select \n        _fivetran_id, \n        date as date_day, \n        _fivetran_synced, \n        average_view_duration_percentage / 100.0 as average_view_duration_percentage, \n        average_view_duration_seconds, \n        channel_id, \n        comments, \n        dislikes, \n        likes, \n        shares, \n        subscribers_gained, \n        subscribers_lost, \n        video_id, \n        views, \n        watch_time_minutes\n    from fields\n)\n\nselect * from final", "relation_name": "\"postgres\".\"youtube_analytics_integration_tests_2_youtube_source\".\"stg_youtube__channel_basic\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-04T20:26:03.287153Z", "completed_at": "2023-12-04T20:26:03.294798Z"}, {"name": "execute", "started_at": "2023-12-04T20:26:03.296255Z", "completed_at": "2023-12-04T20:26:03.296265Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.03167009353637695, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.youtube_analytics_source.not_null_stg_youtube__channel_demographics__fivetran_id.403e193838", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect _fivetran_id\nfrom \"postgres\".\"youtube_analytics_integration_tests_2_youtube_source\".\"stg_youtube__channel_demographics\"\nwhere _fivetran_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-04T20:26:03.281974Z", "completed_at": "2023-12-04T20:26:03.295136Z"}, {"name": "execute", "started_at": "2023-12-04T20:26:03.296589Z", "completed_at": "2023-12-04T20:26:03.296594Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0327143669128418, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.youtube_analytics.youtube__video_metadata", "compiled": true, "compiled_code": "with video_metadata as (\n    select *\n    from \"postgres\".\"youtube_analytics_integration_tests_2_youtube_source\".\"stg_youtube__video\"\n\n), url_parsing as (\n\n    select\n        *,\n        \n\n  video_thumbnails::json #>> '{default,url}'\n\n as default_thumbnail_url,\n        \n\n  video_thumbnails::json #>> '{standard,url}'\n\n as standard_thumbnail_url,\n        \n\n  video_thumbnails::json #>> '{medium,url}'\n\n as medium_thumbnail_url,\n        \n\n  video_thumbnails::json #>> '{high,url}'\n\n as high_thumbnail_url\n    from video_metadata\n)\n\nselect *\nfrom url_parsing", "relation_name": "\"postgres\".\"youtube_analytics_integration_tests_2_youtube\".\"youtube__video_metadata\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-04T20:26:03.300451Z", "completed_at": "2023-12-04T20:26:03.307712Z"}, {"name": "execute", "started_at": "2023-12-04T20:26:03.308985Z", "completed_at": "2023-12-04T20:26:03.308992Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01063394546508789, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.youtube_analytics_source.not_null_stg_youtube__video_video_id.67eb17d62f", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect video_id\nfrom \"postgres\".\"youtube_analytics_integration_tests_2_youtube_source\".\"stg_youtube__video\"\nwhere video_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-04T20:26:03.303702Z", "completed_at": "2023-12-04T20:26:03.308673Z"}, {"name": "execute", "started_at": "2023-12-04T20:26:03.310145Z", "completed_at": "2023-12-04T20:26:03.310149Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.011347293853759766, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.youtube_analytics_source.unique_stg_youtube__channel_demographics__fivetran_id.8a3f8407b2", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    _fivetran_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"youtube_analytics_integration_tests_2_youtube_source\".\"stg_youtube__channel_demographics\"\nwhere _fivetran_id is not null\ngroup by _fivetran_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-04T20:26:03.312753Z", "completed_at": "2023-12-04T20:26:03.319420Z"}, {"name": "execute", "started_at": "2023-12-04T20:26:03.320438Z", "completed_at": "2023-12-04T20:26:03.320448Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.009982109069824219, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.youtube_analytics_source.unique_stg_youtube__video_video_id.bc68114250", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    video_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"youtube_analytics_integration_tests_2_youtube_source\".\"stg_youtube__video\"\nwhere video_id is not null\ngroup by video_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-04T20:26:03.316021Z", "completed_at": "2023-12-04T20:26:03.319996Z"}, {"name": "execute", "started_at": "2023-12-04T20:26:03.321648Z", "completed_at": "2023-12-04T20:26:03.321653Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.010104894638061523, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.youtube_analytics_source.not_null_stg_youtube__channel_basic__fivetran_id.3946ed0006", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect _fivetran_id\nfrom \"postgres\".\"youtube_analytics_integration_tests_2_youtube_source\".\"stg_youtube__channel_basic\"\nwhere _fivetran_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-04T20:26:03.324446Z", "completed_at": "2023-12-04T20:26:03.333161Z"}, {"name": "execute", "started_at": "2023-12-04T20:26:03.334133Z", "completed_at": "2023-12-04T20:26:03.334141Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.01207113265991211, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.youtube_analytics_source.unique_stg_youtube__channel_basic__fivetran_id.2ee35ab57d", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    _fivetran_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"youtube_analytics_integration_tests_2_youtube_source\".\"stg_youtube__channel_basic\"\nwhere _fivetran_id is not null\ngroup by _fivetran_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-04T20:26:03.328485Z", "completed_at": "2023-12-04T20:26:03.333812Z"}, {"name": "execute", "started_at": "2023-12-04T20:26:03.335299Z", "completed_at": "2023-12-04T20:26:03.335303Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.01208186149597168, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.youtube_analytics.youtube__demographics_report", "compiled": true, "compiled_code": "\n\nwith demographics as (\n    \n    select *\n    from \"postgres\".\"youtube_analytics_integration_tests_2_youtube_source\".\"stg_youtube__channel_demographics\"\n\n),  video_metadata as (\n    \n    select *\n    from \"postgres\".\"youtube_analytics_integration_tests_2_youtube\".\"youtube__video_metadata\"\n\n), demographics_by_day as (\n    \n    select\n        demographics.date_day,\n        demographics.video_id,\n        video_metadata.video_title,\n        video_metadata.video_description,\n        video_metadata.channel_title,\n        video_metadata.video_published_at,\n        video_metadata.default_thumbnail_url,\n        video_metadata.medium_thumbnail_url,\n        video_metadata.high_thumbnail_url,\n        demographics.age_group,\n        demographics.country_code,\n        demographics.gender,\n        sum(demographics.views_percentage) as views_percentage\n    from demographics\n\n    left join video_metadata\n        on video_metadata.video_id = demographics.video_id\n\n    group by 1,2,3,4,5,6,7,8,9,10,11,12\n)\n\nselect *\nfrom demographics_by_day", "relation_name": "\"postgres\".\"youtube_analytics_integration_tests_2_youtube\".\"youtube__demographics_report\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-04T20:26:03.337728Z", "completed_at": "2023-12-04T20:26:03.349602Z"}, {"name": "execute", "started_at": "2023-12-04T20:26:03.350230Z", "completed_at": "2023-12-04T20:26:03.350238Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.014581918716430664, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.youtube_analytics.youtube__video_report", "compiled": true, "compiled_code": "with report as (\n\n    select *\n    from \"postgres\".\"youtube_analytics_integration_tests_2_youtube_source\".\"stg_youtube__channel_basic\"\n\n),  video_metadata as (\n    \n    select *\n    from \"postgres\".\"youtube_analytics_integration_tests_2_youtube\".\"youtube__video_metadata\"\n\n), aggregated as (\n\n    select\n        report.date_day, \n        report.video_id,\n        report.channel_id, \n        video_metadata.video_title,\n        video_metadata.video_description,\n        video_metadata.channel_title,\n        video_metadata.video_published_at,\n        video_metadata.default_thumbnail_url,\n        video_metadata.medium_thumbnail_url,\n        video_metadata.high_thumbnail_url,\n        sum(report.average_view_duration_percentage * report.views) / nullif(sum(report.views),0) as average_view_duration_percentage, \n        sum(report.average_view_duration_seconds * report.views) / nullif(sum(report.views),0) as average_view_duration_seconds, \n        sum(report.comments) as comments, \n        sum(report.dislikes) as dislikes, \n        sum(report.likes) as likes, \n        sum(report.shares) as shares, \n        sum(report.subscribers_gained) as subscribers_gained, \n        sum(report.subscribers_lost) as subscribers_lost, \n        sum(report.views) as views, \n        sum(report.watch_time_minutes) as watch_time_minutes\n    from report\n    \n    left join video_metadata\n        on video_metadata.video_id = report.video_id\n\n    group by 1,2,3,4,5,6,7,8,9,10\n\n), additional_features as (\n\n    select \n        *,\n        (average_view_duration_seconds / nullif(average_view_duration_percentage,0)) as video_duration_seconds,\n        md5(cast(coalesce(cast(date_day as TEXT), '_dbt_utils_surrogate_key_null_') || '-' || coalesce(cast(video_id as TEXT), '_dbt_utils_surrogate_key_null_') as TEXT)) as daily_video_id\n    from aggregated\n\n)\n\nselect *\nfrom additional_features", "relation_name": "\"postgres\".\"youtube_analytics_integration_tests_2_youtube\".\"youtube__video_report\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-04T20:26:03.346583Z", "completed_at": "2023-12-04T20:26:03.350504Z"}, {"name": "execute", "started_at": "2023-12-04T20:26:03.351870Z", "completed_at": "2023-12-04T20:26:03.351873Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.015558958053588867, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.youtube_analytics.not_null_youtube__video_metadata_video_id.741947e485", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect video_id\nfrom \"postgres\".\"youtube_analytics_integration_tests_2_youtube\".\"youtube__video_metadata\"\nwhere video_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-04T20:26:03.353754Z", "completed_at": "2023-12-04T20:26:03.399602Z"}, {"name": "execute", "started_at": "2023-12-04T20:26:03.400148Z", "completed_at": "2023-12-04T20:26:03.400155Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.0483400821685791, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.youtube_analytics.unique_youtube__video_metadata_video_id.b447345657", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    video_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"youtube_analytics_integration_tests_2_youtube\".\"youtube__video_metadata\"\nwhere video_id is not null\ngroup by video_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-04T20:26:03.393251Z", "completed_at": "2023-12-04T20:26:03.401763Z"}, {"name": "execute", "started_at": "2023-12-04T20:26:03.404981Z", "completed_at": "2023-12-04T20:26:03.404986Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.012982845306396484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.youtube_analytics.dbt_utils_unique_combination_of_columns_youtube__demographics_report_date_day__video_id__age_group__country_code__gender.397d04eba0", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        date_day, video_id, age_group, country_code, gender\n    from \"postgres\".\"youtube_analytics_integration_tests_2_youtube\".\"youtube__demographics_report\"\n    group by date_day, video_id, age_group, country_code, gender\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-04T20:26:03.402032Z", "completed_at": "2023-12-04T20:26:03.405858Z"}, {"name": "execute", "started_at": "2023-12-04T20:26:03.407483Z", "completed_at": "2023-12-04T20:26:03.407489Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.007040977478027344, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.youtube_analytics.not_null_youtube__video_report_daily_video_id.fa69bcaa17", "compiled": true, "compiled_code": "\n    \n    \n\n\n\nselect daily_video_id\nfrom \"postgres\".\"youtube_analytics_integration_tests_2_youtube\".\"youtube__video_report\"\nwhere daily_video_id is null\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-04T20:26:03.408513Z", "completed_at": "2023-12-04T20:26:03.411539Z"}, {"name": "execute", "started_at": "2023-12-04T20:26:03.412058Z", "completed_at": "2023-12-04T20:26:03.412062Z"}], "thread_id": "Thread-3 (worker)", "execution_time": 0.0054700374603271484, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.youtube_analytics.unique_youtube__video_report_daily_video_id.766b46f4af", "compiled": true, "compiled_code": "\n    \n    \n\nselect\n    daily_video_id as unique_field,\n    count(*) as n_records\n\nfrom \"postgres\".\"youtube_analytics_integration_tests_2_youtube\".\"youtube__video_report\"\nwhere daily_video_id is not null\ngroup by daily_video_id\nhaving count(*) > 1\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-04T20:26:03.578787Z", "completed_at": "2023-12-04T20:26:03.852263Z"}, {"name": "execute", "started_at": "2023-12-04T20:26:03.853936Z", "completed_at": "2023-12-04T20:26:03.853955Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.303983211517334, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.youtube_analytics.youtube__gender_demographics_pivot", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__int_youtube__gender_pivot as (\n\n\nwith demographics as (\n    \n    select *\n    from \"postgres\".\"youtube_analytics_integration_tests_2_youtube_source\".\"stg_youtube__channel_demographics\"\n\n), gender_pivot as (\n    \n    select\n        date_day,\n        video_id,\n        \n  \n    sum(\n      \n      case\n      when gender = 'MALE'\n        then views_percentage\n      else 0\n      end\n    )\n    \n      \n            as \"MALE\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when gender = 'FEMALE'\n        then views_percentage\n      else 0\n      end\n    )\n    \n      \n            as \"FEMALE\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when gender = 'GENDER_OTHER'\n        then views_percentage\n      else 0\n      end\n    )\n    \n      \n            as \"GENDER_OTHER\"\n      \n    \n    \n  \n\n    from demographics\n\n    group by 1,2\n)\n\nselect *\nfrom gender_pivot\n), gender_pivot as (\n\n    select *\n    from __dbt__cte__int_youtube__gender_pivot\n\n), video_metadata as (\n\n    select *\n    from \"postgres\".\"youtube_analytics_integration_tests_2_youtube\".\"youtube__video_metadata\"\n\n\n), final as (\n\n    select\n        gender_pivot.date_day,\n        gender_pivot.video_id,\n        video_metadata.video_title,\n        video_metadata.video_description,\n        video_metadata.video_published_at,\n        video_metadata.channel_title,\n        video_metadata.default_thumbnail_url\n        \n        , gender_pivot.\"MALE\" as MALE_view_percentage\n        , gender_pivot.\"FEMALE\" as FEMALE_view_percentage\n        , gender_pivot.\"GENDER_OTHER\" as GENDER_OTHER_view_percentage\n        from gender_pivot\n\n    left join video_metadata\n        on video_metadata.video_id = gender_pivot.video_id\n\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"youtube_analytics_integration_tests_2_youtube\".\"youtube__gender_demographics_pivot\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-04T20:26:03.883401Z", "completed_at": "2023-12-04T20:26:03.886636Z"}, {"name": "execute", "started_at": "2023-12-04T20:26:03.887138Z", "completed_at": "2023-12-04T20:26:03.887143Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 0.004742860794067383, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.youtube_analytics.dbt_utils_unique_combination_of_columns_youtube__gender_demographics_pivot_date_day__video_id.82bc7ae334", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        date_day, video_id\n    from \"postgres\".\"youtube_analytics_integration_tests_2_youtube\".\"youtube__gender_demographics_pivot\"\n    group by date_day, video_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-04T20:26:03.594782Z", "completed_at": "2023-12-04T20:26:03.879306Z"}, {"name": "execute", "started_at": "2023-12-04T20:26:03.879833Z", "completed_at": "2023-12-04T20:26:03.879839Z"}], "thread_id": "Thread-4 (worker)", "execution_time": 0.31212496757507324, "adapter_response": {}, "message": null, "failures": null, "unique_id": "model.youtube_analytics.youtube__age_demographics_pivot", "compiled": true, "compiled_code": "\n\nwith  __dbt__cte__int_youtube__age_pivot as (\n\n\nwith demographics as (\n    \n    select *\n    from \"postgres\".\"youtube_analytics_integration_tests_2_youtube_source\".\"stg_youtube__channel_demographics\"\n\n), age_pivot as (\n    \n    select\n        date_day,\n        video_id,\n        \n  \n    sum(\n      \n      case\n      when age_group = 'AGE_65_'\n        then views_percentage\n      else 0\n      end\n    )\n    \n      \n            as \"AGE_65_\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when age_group = 'AGE_13_17'\n        then views_percentage\n      else 0\n      end\n    )\n    \n      \n            as \"AGE_13_17\"\n      \n    \n    ,\n  \n    sum(\n      \n      case\n      when age_group = 'AGE_18_24'\n        then views_percentage\n      else 0\n      end\n    )\n    \n      \n            as \"AGE_18_24\"\n      \n    \n    \n  \n\n    from demographics\n\n    group by 1,2\n)\n\nselect *\nfrom age_pivot\n), age_pivot as (\n\n    select *\n    from __dbt__cte__int_youtube__age_pivot\n\n), video_metadata as (\n\n    select *\n    from \"postgres\".\"youtube_analytics_integration_tests_2_youtube\".\"youtube__video_metadata\"\n\n\n), final as (\n\n    select\n        age_pivot.date_day,\n        age_pivot.video_id,\n        video_metadata.video_title,\n        video_metadata.video_description,\n        video_metadata.video_published_at,\n        video_metadata.channel_title,\n        video_metadata.default_thumbnail_url\n        \n        , age_pivot.\"AGE_65_\" as AGE_65__view_percentage\n        , age_pivot.\"AGE_13_17\" as AGE_13_17_view_percentage\n        , age_pivot.\"AGE_18_24\" as AGE_18_24_view_percentage\n        from age_pivot\n\n    left join video_metadata\n        on video_metadata.video_id = age_pivot.video_id\n)\n\nselect *\nfrom final", "relation_name": "\"postgres\".\"youtube_analytics_integration_tests_2_youtube\".\"youtube__age_demographics_pivot\""}, {"status": "success", "timing": [{"name": "compile", "started_at": "2023-12-04T20:26:03.910074Z", "completed_at": "2023-12-04T20:26:03.913169Z"}, {"name": "execute", "started_at": "2023-12-04T20:26:03.913681Z", "completed_at": "2023-12-04T20:26:03.913687Z"}], "thread_id": "Thread-2 (worker)", "execution_time": 0.004933834075927734, "adapter_response": {}, "message": null, "failures": null, "unique_id": "test.youtube_analytics.dbt_utils_unique_combination_of_columns_youtube__age_demographics_pivot_date_day__video_id.eca10b9167", "compiled": true, "compiled_code": "\n\n\n\n\n\nwith validation_errors as (\n\n    select\n        date_day, video_id\n    from \"postgres\".\"youtube_analytics_integration_tests_2_youtube\".\"youtube__age_demographics_pivot\"\n    group by date_day, video_id\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n", "relation_name": null}], "elapsed_time": 2.4357502460479736, "args": {"log_level_file": "debug", "exclude": [], "populate_cache": true, "print": true, "favor_state": false, "log_path": "/Users/joseph.markiewicz/Documents/dbt_packages/youtube_analytics/dbt_youtube_analytics/integration_tests/logs", "defer": false, "partial_parse": true, "strict_mode": false, "use_colors_file": true, "static_parser": true, "vars": {}, "use_colors": true, "write_json": true, "which": "generate", "show_resource_report": false, "empty_catalog": false, "log_format": "default", "log_format_file": "debug", "macro_debugging": false, "send_anonymous_usage_stats": true, "quiet": false, "compile": true, "cache_selected_only": false, "indirect_selection": "eager", "project_dir": "/Users/joseph.markiewicz/Documents/dbt_packages/youtube_analytics/dbt_youtube_analytics/integration_tests", "log_file_max_bytes": 10485760, "introspect": true, "log_level": "info", "profiles_dir": "/Users/joseph.markiewicz/.dbt", "static": false, "enable_legacy_logger": false, "partial_parse_file_diff": true, "version_check": true, "invocation_command": "dbt docs generate -t postgres", "warn_error_options": {"include": [], "exclude": []}, "target": "postgres", "select": [], "printer_width": 80}}